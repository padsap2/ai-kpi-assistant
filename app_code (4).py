# -*- coding: utf-8 -*-
"""app code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r6gM99ViDQx_sr4XO-P1v_1zZdGWe5vL
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import openai  # ‚úÖ Use this
import os
from dotenv import load_dotenv
from io import StringIO
import re

# ‚úÖ Use OpenAI API key from Streamlit secrets
openai.api_key = st.secrets["OPENAI_API_KEY"]

st.set_page_config(page_title="AI KPI Assistant", layout="wide")
st.title("üìä AI KPI Assistant")

# Upload CSV or Excel
uploaded_file = st.file_uploader("Upload your dataset (.csv or .xlsx)", type=["csv", "xlsx"])

if uploaded_file:
    # Read file
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    st.subheader("üîç Preview of Uploaded Data")
    st.dataframe(df.head())

    # Ask question
    user_question = st.text_input("Ask a question about your data (e.g. 'What are the top 5 categories by sales?')")

    if user_question:
        # Turn DataFrame into text
        csv_str = df.head(100).to_csv(index=False)

        # GPT prompt
        prompt = f"""
You are a data analyst. A user uploaded a dataset and asked this question: "{user_question}"

This is a sample of the dataset:
{csv_str}

1. First, explain the answer clearly.
2. Then, show the Python code to generate the result.
3. If relevant, include a visualization using Plotly.
4. Keep the answer short and actionable.
"""

        with st.spinner("Analyzing with GPT..."):
            response = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3
            )

        answer = response.choices[0].message.content
        st.markdown("### ü§ñ Answer")
        st.markdown(answer)

        # Try to execute the code block
        code_blocks = re.findall(r"```python(.*?)```", answer, re.DOTALL)

        if code_blocks:
            st.markdown("### üßæ Visualization / Output")
            try:
                exec(code_blocks[0], {"df": df, "pd": pd, "px": px, "st": st})
            except Exception as e:
                st.error(f"Error running code: {e}")

"""# Nieuwe sectie

# Nieuwe sectie
"""